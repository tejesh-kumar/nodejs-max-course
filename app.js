const path = require('path');

const express = require('express');
const bodyParser = require('body-parser');

const adminRoutes = require('./routes/admin');
const shopRoutes = require('./routes/shop');
const errorController = require('./controllers/error');
const sequelize = require('./util/database');
const Product = require('./models/product');
const User = require('./models/user');

const app = express();   

app.set('view engine', 'ejs');      // ejs is a registered templating engine to deliver templates.
app.set('views', 'views');        // views in root folder is the place to find dynamic views or templates is registered.

app.use(bodyParser.urlencoded({extended: false}));
app.use(express.static(path.join(__dirname, 'public')));

app.use((req, res, next) => {
    User.findByPk(5)
    .then(user => {
        req.user = user;
        next();              // We stored the sequelize object 'user' in 'req' object, but, we are not sending response => we use next() so that the request is funneled to next middlewares.
    })
});

app.use('/admin', adminRoutes);
app.use(shopRoutes);

app.use(errorController.get404);

Product.belongsTo(User, {constraints: true, onDelete: 'CASCADE'});
User.hasMany(Product, {constraints: true});

// sequelize.sync({force: true})
sequelize.sync()
.then(result => {
    return User.findByPk(5); 
})
.then((user) => {
    if(!user) {
        return User.create({ name: 'tejesh', email: 'tejesh@gmail.com' });
    } 
    // return Promise.resolve('user');
    return user;
})
.then((user) => {
    // console.log(user);
    app.listen(3000); 
})
.catch(err => console.log(err));


// magic association methods like req.user.createProduct({})
// From now on, any new products created should be associated with the logged in(req.user) user. For now, only one dummy user.
// => In admin.js, postAddProduct middleware we will not create product as we did earlier. We need to pass in extra information of user who should be associated with this product
// 1st method,
    // exports.postAddProduct = (req, res, next) => { 
    //     const title = req.body.title;
    //     const imageUrl = req.body.imageUrl;
    //     const price = req.body.price;
    //     const description = req.body.description;

    //     Product.create({
    //         title: title,
    //         price: price,
    //         imageUrl: imageUrl,
    //         description: description,
    //         userId: req.user.id
    //     })
    //     .then(result => {
    //         // console.log(result);
    //         console.log('Product Created');
    //         res.redirect('/admin/products');
    //     })
    //     .catch(err => console.log(err));             
    // }

// 2nd method, 
    // exports.postAddProduct = (req, res, next) => { 
    //     const title = req.body.title;
    //     const imageUrl = req.body.imageUrl;
    //     const price = req.body.price;
    //     const description = req.body.description;

    //      req.user.createProduct({
    //          title: title,
    //          price: price,
    //          imageUrl: imageUrl,
    //          description: description
    //      })
    //     .then(result => {
    //         // console.log(result);
    //         console.log('Product Created');
    //         res.redirect('/admin/products');
    //     })
    //     .catch(err => console.log(err));             
    // }
// createProduct() is a method generated by sequelize based on associations or relations (eg:- belongsTo()). 
// On creating a product, the userId is implicitly added by sequelize, to the product table to maintain associations as we have explicitly added using method 1.
